import type { ReactNode } from "react";
import type { User } from "@supabase/supabase-js";
import type { Metadata } from "next";
import { getUserAction } from "@/lib/server-actions/auth-session-action";
import { createClient } from "@/lib/supabase/server";
import AppProvider from "./app-provider";
import "./globals.css";

export type ShowCategory = "Movie" | "TV Series" | "movie" | "tv";

export interface Show {
  id: number;
  title: string;
  overview: string;
  name: string;
  poster_path: string;
  backdrop_path: string;
  media_type: ShowCategory;
  first_air_date: string;
  release_date: string;
  vote_average: number;
  vote_count: number;
}

export const metadata: Metadata = {
  title: "Entertainment App",
  description: "Generated by create next app",
  icons: {
    icon: "/shared/app-icon.png",
    shortcut: "/shared/app-icon.png",
    apple: "/shared/app-icon.png"
  }
};

async function getUserAvatarUrl(user: User | null): Promise<string | null> {
  if (!user) return null;

  const supabase = createClient();

  try {
    const { data } = await supabase.from("users_profile").select("avatar_url").eq("id", user.id);
    const avatarUrl = data ? data.length > 0 && data[0].avatar_url : "";
    return avatarUrl;
  } catch (error) {
    throw new Error((error as Error).message);
  }
}

export default async function RootLayout({ children }: { children: ReactNode }) {
  const user = await getUserAction();
  const avatarUrl = await getUserAvatarUrl(user);

  return (
    <html lang="en">
      <body suppressHydrationWarning>
        <AppProvider userId={user?.id} avatarUrl={avatarUrl ?? ""}>
          {children}
        </AppProvider>
      </body>
    </html>
  );
}
