import type { ReactNode } from "react";
import type { PostgrestSingleResponse } from "@supabase/supabase-js";
import type { Metadata } from "next";
import type { BkmarkedMovies } from "@/app/[category]/bookmark-page";
import { getUserAction } from "@/lib/server-actions/auth-session-action";
import AppProvider from "./app-provider";
import { createClient } from "../lib/supabase/server";
import "./globals.css";

export type ShowCategory = "Movie" | "TV Series" | "movie" | "tv";

export interface Show {
  id: number;
  title: string;
  overview: string;
  name: string;
  poster_path: string;
  backdrop_path: string;
  media_type: ShowCategory;
  first_air_date: string;
  release_date: string;
  vote_average: number;
  vote_count: number;
}

export const metadata: Metadata = {
  title: "Entertainment App",
  description: "Generated by create next app",
  icons: {
    icon: "/shared/app-icon.png",
    shortcut: "/shared/app-icon.png",
    apple: "/shared/app-icon.png"
  }
};

export default async function RootLayout({ children }: { children: ReactNode }) {
  const supabase = createClient();
  const user = await getUserAction();

  const bkmarkedMovies: PostgrestSingleResponse<BkmarkedMovies[]> | null = user
    ? await supabase.from("bookmarked_movies").select("title, category").eq("user_id", user.id)
    : null;

  return (
    <html lang="en">
      <body suppressHydrationWarning>
        <AppProvider userId={user?.id} bkmarkedMovies={bkmarkedMovies?.data ? bkmarkedMovies.data : null}>
          {children}
        </AppProvider>
      </body>
    </html>
  );
}
